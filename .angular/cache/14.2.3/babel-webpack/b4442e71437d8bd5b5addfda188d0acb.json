{"ast":null,"code":"import { of } from \"rxjs\";\nimport { Articulos } from \"../models/articulo\";\nimport * as i0 from \"@angular/core\";\nexport let MockArticulosService = /*#__PURE__*/(() => {\n  class MockArticulosService {\n    constructor() {}\n    /** */\n\n\n    get(Nombre, Activo, pagina) {\n      var Items = Articulos.filter(item => // Nombre == null  chequea por null y undefined\n      // Nombre === null  chequea solo por null\n      (Nombre == null || item.Nombre.toUpperCase().includes(Nombre.toUpperCase())) && (Activo == null || item.Activo == Activo)); //ordenar\n\n      Items = Items.sort((a, b) => a.Nombre.toUpperCase() > b.Nombre.toUpperCase() ? 1 : -1); // paginar con slice\n\n      var RegistrosTotal = Items.length;\n      var RegistroDesde = (pagina - 1) * 10;\n      Items = Items.slice(RegistroDesde, RegistroDesde + 10);\n      return of({\n        Items: Items,\n        RegistrosTotal: RegistrosTotal\n      });\n    } // no usamos get con parametros porque javascript no soporta sobrecarga de metodos!\n\n\n    getById(Id) {\n      var item = Articulos.filter(x => x.IdArticulo === Id)[0];\n      return of(item);\n    }\n\n    post(obj) {\n      obj.IdArticulo = new Date().getTime();\n      obj.IdArticuloFamilia = +obj.IdArticuloFamilia; // convierto a numero, cuando se envia al servidor se hace automaticamente al enlazar las propiedades del modelo definido en el  backend\n\n      obj.Precio = +obj.Precio;\n      obj.Stock = +obj.Stock;\n      Articulos.push(obj);\n      return of(obj);\n    }\n\n    put(Id, obj) {\n      let indice = 0;\n      var items = Articulos.filter(function (item, index) {\n        if (item.IdArticulo === Id) {\n          indice = index;\n        }\n      });\n      obj.IdArticuloFamilia = +obj.IdArticuloFamilia; // convierto a número, cuando se envia al servidor se hace automáticamente al enlazar las propiedades del modelo definido en el  backend\n\n      obj.Precio = +obj.Precio;\n      obj.Stock = +obj.Stock;\n      Articulos[indice] = obj;\n      return of(obj);\n    }\n\n    delete(Id) {\n      var items = Articulos.filter(x => x.IdArticulo === Id);\n      items[0].Activo = !items[0].Activo;\n      return of(items[0]);\n    }\n\n  }\n\n  MockArticulosService.ɵfac = function MockArticulosService_Factory(t) {\n    return new (t || MockArticulosService)();\n  };\n\n  MockArticulosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MockArticulosService,\n    factory: MockArticulosService.ɵfac,\n    providedIn: \"root\"\n  });\n  return MockArticulosService;\n})();","map":null,"metadata":{},"sourceType":"module"}